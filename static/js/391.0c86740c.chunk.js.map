{"version":3,"file":"static/js/391.0c86740c.chunk.js","mappings":"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","sources":["components/Code.tsx","components/TextArea/TextArea.tsx","components/Layout/Layout.tsx","days/day-2/Day2.tsx","days/day-2/d2.ts"],"sourcesContent":["import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport {Prism as SyntaxHighlighter} from \"react-syntax-highlighter\";\nimport {dark} from 'react-syntax-highlighter/dist/cjs/styles/prism'\n\nconst Code = ({htmlContent}: { htmlContent: string }) => {\n    return <article style={{color: 'white'}}>\n        <ReactMarkdown\n            children={htmlContent}\n            components={{\n                code({node, inline, className, children, style, ...props}) {\n                    const match = /language-(\\w+)/.exec(className || '')\n                    return !inline && match ? (\n                        <SyntaxHighlighter\n                            children={String(children).replace(/\\n$/, '')}\n                            style={dark}\n                            language={match[1]}\n                            PreTag=\"div\"\n                            {...props}\n                        />\n                    ) : (\n                        <code className={className} {...props}>\n                            {children}\n                        </code>\n                    )\n                }\n            }}\n        />\n    </article>\n}\n\nexport default Code;","import React from \"react\";\nimport './TextArea.css';\n\ninterface Props extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    initialValue: string\n}\n\nconst TextArea = ({onChange, initialValue, ...props}: Props) =>\n    <textarea name=\"paragraph_text\"\n              cols={80}\n              rows={30}\n              onChange={onChange}\n              defaultValue={initialValue}\n              {...props} />\n\nexport {TextArea};","import React, {ChangeEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport Code from \"../Code\";\nimport {TextArea} from \"../TextArea\";\n\ninterface LayoutProps {\n    title: string,\n    markdown?: any;\n    onChange: ChangeEventHandler<HTMLTextAreaElement>;\n    initialValue: string;\n}\n\nconst Layout = ({\n    children,\n    onChange,\n    initialValue,\n    markdown,\n    title\n}: PropsWithChildren<LayoutProps>) => {\n    const [htmlContent, setHtmlContent] = useState<string | null>(null);\n\n    useEffect(() => {\n        if (markdown) {\n            fetch(markdown)\n                .then(response => response.text())\n                .then(text => {\n                    setHtmlContent(text);\n                })\n        }\n    }, [markdown])\n\n    return (\n        <div className=\"container\">\n            <h1>{title}</h1>\n            <TextArea name=\"paragraph_text\" onChange={onChange} initialValue={initialValue}/>\n            {children}\n            { htmlContent && <Code htmlContent={htmlContent} />}\n        </div>\n    );\n}\n\nexport { Layout }\n","import {Layout} from \"../../components/Layout\";\nimport {useDay2} from \"./d2\";\nimport {ChangeEvent} from \"react\";\n\nconst initialValue = `A Y\nB X\nC Z`;\n\nconst Day2 = () => {\n    const { setStrategyGuide, totalScore, predictionScore } = useDay2(initialValue);\n\n    const onChangeTextArea = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        setStrategyGuide(event.target.value)\n    }\n\n    return <Layout title={\"Rock Paper Scissors\"} onChange={onChangeTextArea} initialValue={initialValue}>\n        <div style={{\n            display: \"flex\",\n            flexDirection: 'column',\n            alignItems: 'start'\n        }}>\n            <p>Total score: <span>{totalScore ?? 0}</span></p>\n            <p>Prediction score: <span>{predictionScore ?? 0}</span></p>\n        </div>\n    </Layout>\n}\n\nexport default Day2;","import {useEffect, useState} from \"react\";\n\ntype Move = \"ROCK\" | \"PAPER\" | \"SCISSORS\"\ntype Result = \"DRAW\" | \"WIN\" | \"LOSE\"\ntype PvP = [Move, Move];\ntype PvM = [Move, Result];\n\nconst winOrder: Move[] = ['ROCK', 'SCISSORS', 'PAPER'];\n\nconst scores: { [key in Move]: number } = {\n    ROCK: 1,\n    PAPER: 2,\n    SCISSORS: 3\n}\n\nconst result: { [key in Result]: number } = {\n    WIN: 6,\n    DRAW: 3,\n    LOSE: 0\n}\n\nfunction parseInput(input: string, predict: true): PvM[];\nfunction parseInput(input: string, predict: false): PvP[];\nfunction parseInput(input: string, predict: boolean = false): PvP[] | PvM[] {\n    const lines = input.split(/\\n/).flatMap(inputSplit)\n    return predict ? lines.map(mapPredictions) : lines.map(mapPlays);\n}\n\nconst player1Input: { [key: string]: Move } = {\n    \"A\": \"ROCK\",\n    \"B\": \"PAPER\",\n    \"C\": \"SCISSORS\",\n}\n\nconst player2Input: { [key: string]: Move } = {\n    \"X\": \"ROCK\",\n    \"Y\": \"PAPER\",\n    \"Z\": \"SCISSORS\",\n}\n\nconst player2Outcomes: { [key: string]: Result } = {\n    \"X\": \"LOSE\",\n    \"Y\": \"DRAW\",\n    \"Z\": \"WIN\",\n}\n\nconst mapPlays = (x: string): PvP => {\n    const [p1, p2] = x.split(' ')\n    const player1 = player1Input[p1]\n    const player2 = player2Input[p2]\n    return [player1, player2]\n}\n\nconst mapPredictions = (x: string): PvM => {\n    const [p1, o] = x.split(' ')\n    const player1 = player1Input[p1]\n    const outcome = player2Outcomes[o]\n    return [player1, outcome]\n}\n\nconst inputSplit = (load: string): string[] => load.split('\\n')\n\nconst getMoveScore = (playerMove: Move): number => scores[playerMove];\nconst getGameScore = (gameResult: Result): number => result[gameResult];\nconst getGameResult = (player1: Move, player2: Move): Result => {\n    if (player1 === player2) {\n        return \"DRAW\";\n    } else {\n        const d = (winOrder.findIndex((s) => s === player1) + 1) % 3;\n        return (winOrder[d] === player2) ? \"LOSE\" : \"WIN\";\n    }\n}\n\nconst getPlayPrediction = (player1: Move, player2: Result): Move => {\n    if (player2 === \"DRAW\") {\n        return player1;\n    } else {\n        const playIndex = (winOrder.findIndex((s) => s === player1));\n        const rotations = player2 === \"LOSE\" ? 1 : 2\n        return winOrder[(playIndex + rotations) % 3]\n    }\n}\n\nconst scorePart1 = (prev: number, [player1, player2]: PvP): number => {\n    const gameResult = getGameResult(player1, player2)\n\n    const gameScore = getGameScore(gameResult)\n    const moveScore = getMoveScore(player2)\n    return gameScore + moveScore + prev\n}\n\nconst scorePart2 = (prev: number, [player1, outcome]: PvM): number => {\n    const player2PredictedMove = getPlayPrediction(player1, outcome)\n    const gameResult = getGameResult(player1 as Move, player2PredictedMove)\n\n    const gameScore = getGameScore(gameResult)\n    const moveScore = getMoveScore(player2PredictedMove)\n    return gameScore + moveScore + prev\n};\n\nconst useDay2 = (initialValue: string) => {\n    const [strategyGuide, setStrategyGuide] = useState<string>(initialValue);\n    const [totalScore, setTotalScore] = useState<number>();\n    const [predictionScore, setPredictionScore] = useState<number>();\n\n    useEffect(() => {\n        const moveBased = parseInput(strategyGuide, false).reduce(scorePart1, 0)\n        const outcomeBased = parseInput(strategyGuide, true).reduce(scorePart2, 0)\n\n        setTotalScore(isNaN(moveBased) ? undefined : moveBased)\n        setPredictionScore(isNaN(outcomeBased) ? undefined : outcomeBased)\n    }, [strategyGuide])\n\n    return {setStrategyGuide, totalScore, predictionScore}\n}\n\nexport {useDay2}"],"names":["htmlContent","style","color","children","components","code","node","inline","className","props","match","exec","String","replace","dark","language","PreTag","TextArea","onChange","initialValue","name","cols","rows","defaultValue","Layout","markdown","title","useState","setHtmlContent","useEffect","fetch","then","response","text","useDay2","setStrategyGuide","totalScore","predictionScore","event","target","value","display","flexDirection","alignItems","winOrder","scores","ROCK","PAPER","SCISSORS","result","WIN","DRAW","LOSE","parseInput","input","predict","lines","split","flatMap","inputSplit","map","mapPredictions","mapPlays","player1Input","player2Input","player2Outcomes","x","p1","p2","o","load","getMoveScore","playerMove","getGameScore","gameResult","getGameResult","player1","player2","d","findIndex","s","scorePart1","prev","scorePart2","player2PredictedMove","playIndex","getPlayPrediction","strategyGuide","setTotalScore","setPredictionScore","moveBased","reduce","outcomeBased","isNaN","undefined"],"sourceRoot":""}