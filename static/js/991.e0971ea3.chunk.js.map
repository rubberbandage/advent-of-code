{"version":3,"file":"static/js/991.e0971ea3.chunk.js","mappings":"qLA6BMA,EAAU,SAACC,GACb,OAAwCC,EAAAA,EAAAA,UAAiBD,GAAa,eAA/DE,EAAY,KAAEC,EAAe,KACpC,GAAwCF,EAAAA,EAAAA,YAAkD,eAAnFG,EAAY,KAAEC,EAAe,KACpC,GAAwBJ,EAAAA,EAAAA,YAAgC,eAAjDK,EAAI,KAAEC,EAAO,KAQpB,OANAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAyBP,EAhCfQ,MAAM,WAErBC,KAAI,SAACC,GAAI,OACNA,EAAKF,MAAM,MACNG,QAAO,SAACC,EAAGC,GAAC,OAAKA,EAAID,EAAIE,SAASD,GAAKD,CAAC,GAAE,EAAE,IA6BrDT,EA1BQ,SAACY,GACb,IAAMC,EAAcC,KAAKC,IAAG,MAARD,MAAI,OAAQF,GAAU,QAAE,KAG5C,MAAO,CACHI,SAHkBJ,EAAWK,QAAQJ,GAGX,EAC1BK,SAAUL,EAElB,CAkBwBM,CAAQf,IACxBF,EAjBQ,SAACU,EAAsBX,GAInC,MAAO,CACHiB,UAJM,OAAON,GACGQ,MAAK,SAACX,EAAGC,GAAC,OAAKA,EAAID,CAAC,IAAEY,MAAM,EAAGpB,GACtBO,QAAO,SAACC,EAAGC,GAAC,OAAKA,EAAID,EAAIC,EAAID,CAAC,GAAE,GAIjE,CAUgBa,CAAQlB,EAAa,GACjC,GAAG,CAACP,IAEG,CAACC,gBAAAA,EAAiBC,aAAAA,EAAcwB,KAAMtB,EACjD,C,wBCzCe,SAASuB,EAAiBC,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOG,MAAMC,KAAKJ,EACtH,C,gICEe,SAASK,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIH,MAAMI,QAAQD,GAAM,OAAO,EAAAE,EAAA,GAAiBF,EAClD,CDES,CAAkBA,KAAQ,EAAAG,EAAA,GAAgBH,KAAQ,EAAAI,EAAA,GAA2BJ,IELvE,WACb,MAAM,IAAIK,UAAU,uIACtB,CFG8F,EAC9F,C","sources":["days/day-1/d1.ts","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\n\nconst parseElves = (input: string) => {\n    const elves = input.split(/\\n\\s*\\n/)\n    return elves\n        .map((load) =>\n            load.split('\\n')\n                .reduce((a, b) => b ? a + parseInt(b) : a, 0))\n}\n\nconst d1part1 = (elvesCount: number[]): { position: number, calories: number } => {\n    const maxCalories = Math.max(...elvesCount, 0)\n    const indexCalories = elvesCount.indexOf(maxCalories);\n\n    return {\n        position: indexCalories + 1,\n        calories: maxCalories\n    }\n}\n\nconst d1part2 = (elvesCount: number[], topX: number): { calories: number } => {\n    const copy = [...elvesCount];\n    const sorted = copy.sort((a, b) => b - a).slice(0, topX);\n    const indexCalories = sorted.reduce((a, b) => b ? a + b : a, 0)\n    return {\n        calories: indexCalories\n    }\n}\n\nconst useDay1 = (initialValue: string) => {\n    const [caloriesList, setCaloriesList] = useState<string>(initialValue);\n    const [mostCalories, setMostCalories] = useState<{ position: number, calories: number }>();\n    const [topX, setTopX] = useState<{ calories: number }>();\n\n    useEffect(() => {\n        const parsedElves = parseElves(caloriesList);\n        setMostCalories(d1part1(parsedElves))\n        setTopX(d1part2(parsedElves, 3))\n    }, [caloriesList])\n\n    return {setCaloriesList, mostCalories, top3: topX}\n}\n\nexport {useDay1}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["useDay1","initialValue","useState","caloriesList","setCaloriesList","mostCalories","setMostCalories","topX","setTopX","useEffect","parsedElves","split","map","load","reduce","a","b","parseInt","elvesCount","maxCalories","Math","max","position","indexOf","calories","d1part1","sort","slice","d1part2","top3","_iterableToArray","iter","Symbol","iterator","Array","from","_toConsumableArray","arr","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError"],"sourceRoot":""}