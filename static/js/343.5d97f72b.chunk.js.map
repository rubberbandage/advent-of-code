{"version":3,"file":"static/js/343.5d97f72b.chunk.js","mappings":"yLAGMA,EAAU,SAACC,GACb,OAA0BC,EAAAA,EAAAA,UAAiBD,GAAa,eAAjDE,EAAK,KAAEC,EAAQ,KACtB,GAA4CF,EAAAA,EAAAA,UAAiB,GAAE,eAAxDG,EAAc,KAAEC,EAAiB,KACxC,GAAwCJ,EAAAA,EAAAA,UAAiB,GAAE,eAApDK,EAAY,KAAEC,EAAe,KAiBpC,OAfAC,EAAAA,EAAAA,YAAU,WACN,IAEMC,EAFQP,EAAMQ,MAAM,MAEHC,KAAI,SAACC,GACxB,MAA+BA,EAAKF,MAAM,KAAKC,IAAIE,EAAAA,SAAmB,sBAA/DC,OAAI,MAAG,GAAE,SAAEC,OAAI,MAAG,GAAE,EAI3B,MAAO,CAAEC,aAHWF,EAAKG,OAAS,GAAKF,EAAKE,OAAS,KACtBH,EAAKI,OAAM,SAACC,GAAC,OAAKJ,EAAKK,SAASD,EAAE,KAAKJ,EAAKG,OAAM,SAACC,GAAC,OAAKL,EAAKM,SAASD,EAAE,KAEpFE,QADJP,EAAKQ,MAAK,SAACH,GAAC,OAAKJ,EAAKK,SAASD,EAAE,IAErD,IAEAd,EAAkBI,EAASc,QAAO,YAAY,SAATP,SAAyB,IAAEC,QAChEV,EAAgBE,EAASc,QAAO,YAAU,SAAPF,OAAqB,IAAEJ,OAC9D,GAAG,CAACf,IAEG,CACHC,SAAAA,EAAUC,eAAAA,EAAgBE,aAAAA,EAElC,C,6CCfA,UAX2B,SAACkB,GACxB,MAAwBA,EAAYd,MAAM,KAAI,eAAvCe,EAAK,KAAEC,EAAM,KAEdC,EAAcC,SAASH,GACvBI,EAAeD,SAASF,GAE9B,OAAOI,MAAMC,KACT,CAACd,OAASY,EAAeF,EAAc,IACvC,SAACK,EAAGC,GAAC,OAAKA,EAAIN,CAAW,GACjC,C","sources":["days/day-4/d4.ts","days/day-4/util/numberGroupToArray.ts"],"sourcesContent":["import {useEffect, useState} from \"react\";\nimport numberGroupToArray from \"./util/numberGroupToArray\";\n\nconst useDay4 = (initialValue: string) => {\n    const [camps, setCamps] = useState<string>(initialValue)\n    const [exclusivePairs, setExclusivePairs] = useState<number>(0)\n    const [partialPairs, setPartialPairs] = useState<number>(0)\n\n    useEffect(() => {\n        const pairs = camps.split(/\\n/);\n\n        const overlaps = pairs.map((line) => {\n            const [elf1 = [], elf2 = []] = line.split(',').map(numberGroupToArray)\n            const hasContent = (elf1.length > 0 && elf2.length > 0)\n            const exclusive = hasContent ? elf1.every((d) => elf2.includes(d)) || elf2.every((d) => elf1.includes(d)) : false;\n            const partial = elf1.some((d) => elf2.includes(d));\n            return { exclusive, partial }\n        })\n\n        setExclusivePairs(overlaps.filter(({ exclusive }) => exclusive).length)\n        setPartialPairs(overlaps.filter(({ partial }) => partial).length)\n    }, [camps])\n\n    return {\n        setCamps, exclusivePairs, partialPairs\n    }\n}\n\nexport {useDay4}","const numberGroupToArray = (numberGroup: string) => {\n    const [first, second] = numberGroup.split('-');\n\n    const firstNumber = parseInt(first)\n    const secondNumber = parseInt(second)\n\n    return Array.from(\n        {length: (secondNumber - firstNumber + 1)},\n        (v, k) => k + firstNumber)\n}\n\nexport default numberGroupToArray"],"names":["useDay4","initialValue","useState","camps","setCamps","exclusivePairs","setExclusivePairs","partialPairs","setPartialPairs","useEffect","overlaps","split","map","line","numberGroupToArray","elf1","elf2","exclusive","length","every","d","includes","partial","some","filter","numberGroup","first","second","firstNumber","parseInt","secondNumber","Array","from","v","k"],"sourceRoot":""}