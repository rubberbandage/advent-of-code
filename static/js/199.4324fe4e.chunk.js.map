{"version":3,"file":"static/js/199.4324fe4e.chunk.js","mappings":"2KAOMA,EAAmB,CAAC,OAAQ,WAAY,SAExCC,EAAoC,CACtCC,KAAM,EACNC,MAAO,EACPC,SAAU,GAGRC,EAAsC,CACxCC,IAAK,EACLC,KAAM,EACNC,KAAM,GAKV,SAASC,EAAWC,GAAyD,IAA1CC,EAAgB,wDACzCC,EAAQF,EAAMG,MAAM,MAAMC,QAAQC,GACxC,OAAOJ,EAAUC,EAAMI,IAAIC,GAAkBL,EAAMI,IAAIE,EAC3D,CAEA,IAAMC,EAAwC,CAC1C,EAAK,OACL,EAAK,QACL,EAAK,YAGHC,EAAwC,CAC1C,EAAK,OACL,EAAK,QACL,EAAK,YAGHC,EAA6C,CAC/C,EAAK,OACL,EAAK,OACL,EAAK,OAGHH,EAAW,SAACI,GACd,MAAiBA,EAAET,MAAM,KAAI,eAAtBU,EAAE,KAAEC,EAAE,KAGb,MAAO,CAFSL,EAAaI,GACbH,EAAaI,GAEjC,EAEMP,EAAiB,SAACK,GACpB,MAAgBA,EAAET,MAAM,KAAI,eAArBU,EAAE,KAAEE,EAAC,KAGZ,MAAO,CAFSN,EAAaI,GACbF,EAAgBI,GAEpC,EAEMV,EAAa,SAACW,GAAY,OAAeA,EAAKb,MAAM,KAAK,EAEzDc,EAAe,SAACC,GAAgB,OAAa3B,EAAO2B,EAAY,EAChEC,EAAe,SAACC,GAAkB,OAAazB,EAAOyB,EAAY,EAClEC,EAAgB,SAACC,EAAeC,GAClC,GAAID,IAAYC,EACZ,MAAO,OAEP,IAAMC,GAAKlC,EAASmC,WAAU,SAACC,GAAC,OAAKA,IAAMJ,CAAO,IAAI,GAAK,EAC3D,OAAQhC,EAASkC,KAAOD,EAAW,OAAS,KAEpD,EAYMI,EAAa,SAACC,EAAa,GAAsC,IAAD,eAAnCN,EAAO,KAAEC,EAAO,KACzCH,EAAaC,EAAcC,EAASC,GAI1C,OAFkBJ,EAAaC,GACbH,EAAaM,GACAK,CACnC,EAEMC,EAAa,SAACD,EAAa,GAAsC,IAAD,eAAnCN,EAAO,KAChCQ,EAnBgB,SAACR,EAAeC,GACtC,GAAgB,SAAZA,EACA,OAAOD,EAEP,IAAMS,EAAazC,EAASmC,WAAU,SAACC,GAAC,OAAKA,IAAMJ,CAAO,IAE1D,OAAOhC,GAAUyC,GADa,SAAZR,EAAqB,EAAI,IACD,EAElD,CAWiCS,CAAkBV,EADA,MAEzCF,EAAaC,EAAcC,EAAiBQ,GAIlD,OAFkBX,EAAaC,GACbH,EAAaa,GACAF,CACnC,EAEMK,EAAU,SAACC,GACb,OAA0CC,EAAAA,EAAAA,UAAiBD,GAAa,eAAjEE,EAAa,KAAEC,EAAgB,KACtC,GAAoCF,EAAAA,EAAAA,YAAkB,eAA/CG,EAAU,KAAEC,EAAa,KAChC,GAA8CJ,EAAAA,EAAAA,YAAkB,eAAzDK,EAAe,KAAEC,EAAkB,KAU1C,OARAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY5C,EAAWqC,GAAe,GAAOQ,OAAOjB,EAAY,GAChEkB,EAAe9C,EAAWqC,GAAe,GAAMQ,OAAOf,EAAY,GAExEU,EAAcO,MAAMH,QAAaI,EAAYJ,GAC7CF,EAAmBK,MAAMD,QAAgBE,EAAYF,EACzD,GAAG,CAACT,IAEG,CAACC,iBAAAA,EAAkBC,WAAAA,EAAYE,gBAAAA,EAC1C,C","sources":["days/day-2/d2.ts"],"sourcesContent":["import {useEffect, useState} from \"react\";\n\ntype Move = \"ROCK\" | \"PAPER\" | \"SCISSORS\"\ntype Result = \"DRAW\" | \"WIN\" | \"LOSE\"\ntype PvP = [Move, Move];\ntype PvM = [Move, Result];\n\nconst winOrder: Move[] = ['ROCK', 'SCISSORS', 'PAPER'];\n\nconst scores: { [key in Move]: number } = {\n    ROCK: 1,\n    PAPER: 2,\n    SCISSORS: 3\n}\n\nconst result: { [key in Result]: number } = {\n    WIN: 6,\n    DRAW: 3,\n    LOSE: 0\n}\n\nfunction parseInput(input: string, predict: true): PvM[];\nfunction parseInput(input: string, predict: false): PvP[];\nfunction parseInput(input: string, predict: boolean = false): PvP[] | PvM[] {\n    const lines = input.split(/\\n/).flatMap(inputSplit)\n    return predict ? lines.map(mapPredictions) : lines.map(mapPlays);\n}\n\nconst player1Input: { [key: string]: Move } = {\n    \"A\": \"ROCK\",\n    \"B\": \"PAPER\",\n    \"C\": \"SCISSORS\",\n}\n\nconst player2Input: { [key: string]: Move } = {\n    \"X\": \"ROCK\",\n    \"Y\": \"PAPER\",\n    \"Z\": \"SCISSORS\",\n}\n\nconst player2Outcomes: { [key: string]: Result } = {\n    \"X\": \"LOSE\",\n    \"Y\": \"DRAW\",\n    \"Z\": \"WIN\",\n}\n\nconst mapPlays = (x: string): PvP => {\n    const [p1, p2] = x.split(' ')\n    const player1 = player1Input[p1]\n    const player2 = player2Input[p2]\n    return [player1, player2]\n}\n\nconst mapPredictions = (x: string): PvM => {\n    const [p1, o] = x.split(' ')\n    const player1 = player1Input[p1]\n    const outcome = player2Outcomes[o]\n    return [player1, outcome]\n}\n\nconst inputSplit = (load: string): string[] => load.split('\\n')\n\nconst getMoveScore = (playerMove: Move): number => scores[playerMove];\nconst getGameScore = (gameResult: Result): number => result[gameResult];\nconst getGameResult = (player1: Move, player2: Move): Result => {\n    if (player1 === player2) {\n        return \"DRAW\";\n    } else {\n        const d = (winOrder.findIndex((s) => s === player1) + 1) % 3;\n        return (winOrder[d] === player2) ? \"LOSE\" : \"WIN\";\n    }\n}\n\nconst getPlayPrediction = (player1: Move, player2: Result): Move => {\n    if (player2 === \"DRAW\") {\n        return player1;\n    } else {\n        const playIndex = (winOrder.findIndex((s) => s === player1));\n        const rotations = player2 === \"LOSE\" ? 1 : 2\n        return winOrder[(playIndex + rotations) % 3]\n    }\n}\n\nconst scorePart1 = (prev: number, [player1, player2]: PvP): number => {\n    const gameResult = getGameResult(player1, player2)\n\n    const gameScore = getGameScore(gameResult)\n    const moveScore = getMoveScore(player2)\n    return gameScore + moveScore + prev\n}\n\nconst scorePart2 = (prev: number, [player1, outcome]: PvM): number => {\n    const player2PredictedMove = getPlayPrediction(player1, outcome)\n    const gameResult = getGameResult(player1 as Move, player2PredictedMove)\n\n    const gameScore = getGameScore(gameResult)\n    const moveScore = getMoveScore(player2PredictedMove)\n    return gameScore + moveScore + prev\n};\n\nconst useDay2 = (initialValue: string) => {\n    const [strategyGuide, setStrategyGuide] = useState<string>(initialValue);\n    const [totalScore, setTotalScore] = useState<number>();\n    const [predictionScore, setPredictionScore] = useState<number>();\n\n    useEffect(() => {\n        const moveBased = parseInput(strategyGuide, false).reduce(scorePart1, 0)\n        const outcomeBased = parseInput(strategyGuide, true).reduce(scorePart2, 0)\n\n        setTotalScore(isNaN(moveBased) ? undefined : moveBased)\n        setPredictionScore(isNaN(outcomeBased) ? undefined : outcomeBased)\n    }, [strategyGuide])\n\n    return {setStrategyGuide, totalScore, predictionScore}\n}\n\nexport {useDay2}"],"names":["winOrder","scores","ROCK","PAPER","SCISSORS","result","WIN","DRAW","LOSE","parseInput","input","predict","lines","split","flatMap","inputSplit","map","mapPredictions","mapPlays","player1Input","player2Input","player2Outcomes","x","p1","p2","o","load","getMoveScore","playerMove","getGameScore","gameResult","getGameResult","player1","player2","d","findIndex","s","scorePart1","prev","scorePart2","player2PredictedMove","playIndex","getPlayPrediction","useDay2","initialValue","useState","strategyGuide","setStrategyGuide","totalScore","setTotalScore","predictionScore","setPredictionScore","useEffect","moveBased","reduce","outcomeBased","isNaN","undefined"],"sourceRoot":""}