{"version":3,"file":"static/js/363.b7a68cec.chunk.js","mappings":"oIAGAA,SAAS,KAAK,WACVC,GAAG,oCAAoC,WACnC,IAKOC,GAAUC,EAAAA,EAAAA,KAAW,kBAAMC,EAAAA,EAAAA,SALhB,mBAKqC,IAAhDF,OACPG,OAAOH,EAAOI,QAAQC,cAAcC,QAAQ,CACxCC,SAAU,GACVC,SAAU,GAGlB,IAEAT,GAAG,6CAA6C,WAC5C,IAMOC,GAAUC,EAAAA,EAAAA,KAAW,kBAAMC,EAAAA,EAAAA,SANhB,qBAMqC,IAAhDF,OACPG,OAAOH,EAAOI,QAAQC,cAAcC,QAAQ,CACxCC,SAAU,GACVC,SAAU,GAGlB,GACJ,G,sHCHMN,EAAU,SAACO,GACb,OAAwCC,EAAAA,EAAAA,UAAiBD,GAAa,eAA/DE,EAAY,KAAEC,EAAe,KACpC,GAAwCF,EAAAA,EAAAA,YAAkD,eAAnFL,EAAY,KAAEQ,EAAe,KACpC,GAAwBH,EAAAA,EAAAA,YAAgC,eAAjDI,EAAI,KAAEC,EAAO,KAQpB,OANAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAyBN,EAhCfO,MAAM,WAErBC,KAAI,SAACC,GAAI,OACNA,EAAKF,MAAM,MACNG,QAAO,SAACC,EAAGC,GAAC,OAAKA,EAAID,EAAIE,SAASD,GAAKD,CAAC,GAAE,EAAE,IA6BrDT,EA1BQ,SAACY,GACb,IAAMC,EAAcC,KAAKC,IAAG,MAARD,MAAI,OAAQF,GAAU,QAAE,KAG5C,MAAO,CACHjB,SAHkBiB,EAAWI,QAAQH,GAGX,EAC1BnB,SAAUmB,EAElB,CAkBwBI,CAAQb,IACxBF,EAjBQ,SAACU,EAAsBX,GAInC,MAAO,CACHP,UAJM,OAAOkB,GACGM,MAAK,SAACT,EAAGC,GAAC,OAAKA,EAAID,CAAC,IAAEU,MAAM,EAAGlB,GACtBO,QAAO,SAACC,EAAGC,GAAC,OAAKA,EAAID,EAAIC,EAAID,CAAC,GAAE,GAIjE,CAUgBW,CAAQhB,EAAa,GACjC,GAAG,CAACN,IAEG,CAACC,gBAAAA,EAAiBP,aAAAA,EAAc6B,KAAMpB,EACjD,C","sources":["days/day-1/d1.test.ts","days/day-1/d1.ts"],"sourcesContent":["import {useDay1} from './d1';\nimport {renderHook} from \"@testing-library/react\";\n\ndescribe('A', () => {\n    it('calculates a grouping of numbers', () => {\n        const initialValue = `\n12\n16\n30\n14`\n        const {result} = renderHook(() => useDay1(initialValue));\n        expect(result.current.mostCalories).toEqual({\n            calories: 72,\n            position: 1\n        });\n\n    })\n\n    it('calculates the elf with the most calories', () => {\n        const initialValue = `\n12\n16\n\n30\n14`\n        const {result} = renderHook(() => useDay1(initialValue));\n        expect(result.current.mostCalories).toEqual({\n            calories: 44,\n            position: 2\n        });\n\n    })\n})","import {useEffect, useState} from \"react\";\n\nconst parseElves = (input: string) => {\n    const elves = input.split(/\\n\\s*\\n/)\n    return elves\n        .map((load) =>\n            load.split('\\n')\n                .reduce((a, b) => b ? a + parseInt(b) : a, 0))\n}\n\nconst d1part1 = (elvesCount: number[]): { position: number, calories: number } => {\n    const maxCalories = Math.max(...elvesCount, 0)\n    const indexCalories = elvesCount.indexOf(maxCalories);\n\n    return {\n        position: indexCalories + 1,\n        calories: maxCalories\n    }\n}\n\nconst d1part2 = (elvesCount: number[], topX: number): { calories: number } => {\n    const copy = [...elvesCount];\n    const sorted = copy.sort((a, b) => b - a).slice(0, topX);\n    const indexCalories = sorted.reduce((a, b) => b ? a + b : a, 0)\n    return {\n        calories: indexCalories\n    }\n}\n\nconst useDay1 = (initialValue: string) => {\n    const [caloriesList, setCaloriesList] = useState<string>(initialValue);\n    const [mostCalories, setMostCalories] = useState<{ position: number, calories: number }>();\n    const [topX, setTopX] = useState<{ calories: number }>();\n\n    useEffect(() => {\n        const parsedElves = parseElves(caloriesList);\n        setMostCalories(d1part1(parsedElves))\n        setTopX(d1part2(parsedElves, 3))\n    }, [caloriesList])\n\n    return {setCaloriesList, mostCalories, top3: topX}\n}\n\nexport {useDay1}"],"names":["describe","it","result","renderHook","useDay1","expect","current","mostCalories","toEqual","calories","position","initialValue","useState","caloriesList","setCaloriesList","setMostCalories","topX","setTopX","useEffect","parsedElves","split","map","load","reduce","a","b","parseInt","elvesCount","maxCalories","Math","max","indexOf","d1part1","sort","slice","d1part2","top3"],"sourceRoot":""}