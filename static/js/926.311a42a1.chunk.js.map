{"version":3,"file":"static/js/926.311a42a1.chunk.js","mappings":"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","sources":["components/Code.tsx","components/TextArea/TextArea.tsx","components/Layout/Layout.tsx","days/day-1/Day1.tsx","days/day-1/d1.ts"],"sourcesContent":["import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport {Prism as SyntaxHighlighter} from \"react-syntax-highlighter\";\nimport {dark} from 'react-syntax-highlighter/dist/cjs/styles/prism'\n\nconst Code = ({htmlContent}: { htmlContent: string }) => {\n    return <article style={{color: 'white'}}>\n        <ReactMarkdown\n            children={htmlContent}\n            components={{\n                code({node, inline, className, children, style, ...props}) {\n                    const match = /language-(\\w+)/.exec(className || '')\n                    return !inline && match ? (\n                        <SyntaxHighlighter\n                            children={String(children).replace(/\\n$/, '')}\n                            style={dark}\n                            language={match[1]}\n                            PreTag=\"div\"\n                            {...props}\n                        />\n                    ) : (\n                        <code className={className} {...props}>\n                            {children}\n                        </code>\n                    )\n                }\n            }}\n        />\n    </article>\n}\n\nexport default Code;","import React from \"react\";\nimport './TextArea.css';\n\ninterface Props extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    initialValue: string\n}\n\nconst TextArea = ({onChange, initialValue, ...props}: Props) =>\n    <textarea name=\"paragraph_text\"\n              cols={80}\n              rows={30}\n              onChange={onChange}\n              defaultValue={initialValue}\n              {...props} />\n\nexport {TextArea};","import React, {ChangeEventHandler, PropsWithChildren, useEffect, useState} from \"react\";\nimport Code from \"../Code\";\nimport {TextArea} from \"../TextArea\";\n\ninterface LayoutProps {\n    title: string,\n    markdown?: any;\n    onChange: ChangeEventHandler<HTMLTextAreaElement>;\n    initialValue: string;\n}\n\nconst Layout = ({\n    children,\n    onChange,\n    initialValue,\n    markdown,\n    title\n}: PropsWithChildren<LayoutProps>) => {\n    const [htmlContent, setHtmlContent] = useState<string | null>(null);\n\n    useEffect(() => {\n        if (markdown) {\n            fetch(markdown)\n                .then(response => response.text())\n                .then(text => {\n                    setHtmlContent(text);\n                })\n        }\n    }, [markdown])\n\n    return (\n        <div className=\"container\">\n            <h1>{title}</h1>\n            <TextArea name=\"paragraph_text\" onChange={onChange} initialValue={initialValue}/>\n            {children}\n            { htmlContent && <Code htmlContent={htmlContent} />}\n        </div>\n    );\n}\n\nexport { Layout }\n","import {useDay1} from \"./d1\";\n\n//@ts-ignore\nimport d1Markdown from \"./d1.md\";\nimport React, {ChangeEvent} from \"react\";\nimport {TextArea} from \"../../components\";\nimport {Layout} from \"../../components/Layout\";\n\nconst initialValue = `1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000`;\n\nconst Day1 = () => {\n    const {setCaloriesList, mostCalories, top3} = useDay1(initialValue);\n\n    const onChangeTextArea = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        setCaloriesList(event.target.value)\n    }\n\n    return <Layout\n        title='Most Calories'\n        onChange={onChangeTextArea}\n        initialValue={initialValue}\n        markdown={d1Markdown}\n    >\n        <p>Part 1: Elf <span>{mostCalories?.position}</span> carries <span>{mostCalories?.calories}</span> calories\n        </p>\n        <p>Part 2: Top 3 Elves have <span>{top3?.calories}</span> calories</p>\n    </Layout>\n}\n\nexport default Day1;","import {useEffect, useState} from \"react\";\n\nconst parseElves = (input: string) => {\n    const elves = input.split(/\\n\\s*\\n/)\n    return elves\n        .map((load) =>\n            load.split('\\n')\n                .reduce((a, b) => b ? a + parseInt(b) : a, 0))\n}\n\nconst d1part1 = (elvesCount: number[]): { position: number, calories: number } => {\n    const maxCalories = Math.max(...elvesCount, 0)\n    const indexCalories = elvesCount.indexOf(maxCalories);\n\n    return {\n        position: indexCalories + 1,\n        calories: maxCalories\n    }\n}\n\nconst d1part2 = (elvesCount: number[], topX: number): { calories: number } => {\n    const copy = [...elvesCount];\n    const sorted = copy.sort((a, b) => b - a).slice(0, topX);\n    const indexCalories = sorted.reduce((a, b) => b ? a + b : a, 0)\n    return {\n        calories: indexCalories\n    }\n}\n\nconst useDay1 = (initialValue: string) => {\n    const [caloriesList, setCaloriesList] = useState<string>(initialValue);\n    const [mostCalories, setMostCalories] = useState<{ position: number, calories: number }>();\n    const [topX, setTopX] = useState<{ calories: number }>();\n\n    useEffect(() => {\n        const parsedElves = parseElves(caloriesList);\n        setMostCalories(d1part1(parsedElves))\n        setTopX(d1part2(parsedElves, 3))\n    }, [caloriesList])\n\n    return {setCaloriesList, mostCalories, top3: topX}\n}\n\nexport {useDay1}"],"names":["htmlContent","style","color","children","components","code","node","inline","className","props","match","exec","String","replace","dark","language","PreTag","TextArea","onChange","initialValue","name","cols","rows","defaultValue","Layout","markdown","title","useState","setHtmlContent","useEffect","fetch","then","response","text","useDay1","setCaloriesList","mostCalories","top3","event","target","value","d1Markdown","position","calories","caloriesList","setMostCalories","topX","setTopX","parsedElves","split","map","load","reduce","a","b","parseInt","elvesCount","maxCalories","Math","max","indexOf","d1part1","sort","slice","d1part2"],"sourceRoot":""}